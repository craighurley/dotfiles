# Cleanup
function dsclean() {
    read -r -p "Delete all .DS_Stores in this directory and all subdirectories? (y/n) " -n 1
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] ; then
        find . -type f -name '.DS_Store' -ls -delete
    fi
}

# Decode base64
function decode() {
    echo "$1" | base64 --decode ; echo
}

# Generate a random set of words for use in a password
function mkpassphrase() {
    p=$(gshuf -n${1-3} /usr/share/dict/words | tr '\n' ' ' | tr '[:upper:]' '[:lower:]' | sed 's/[[:space:]]$//')
    echo $p
}

function mkpassphrases() {
    for i in {1..10} ; do
        p=$(gshuf -n${1-3} /usr/share/dict/words | tr '\n' ' ' | tr '[:upper:]' '[:lower:]' | sed 's/[[:space:]]$//')
        echo $p
    done
}

function colours() {
    for i in {0..255} ; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
    done
}

# rename tabs, useful for iterm2 and tmux
function rt {
    echo -ne "\033]0;"$@"\007"
}

# display all files in the user dir open by a given app
function lsof-ls() {
    if [[ ! -z "$1" ]] ; then
        p=$(lsof -t -c "$1")
        if [[ ! -z "$p" ]] ; then
            lsof -p "$p"
        else
            echo Could not find a process id for "$1"
        fi
    fi
}

# aws
function _aws_profile_list() {
    credentialFileLocation=${AWS_SHARED_CREDENTIALS_FILE};
    if [ -z $credentialFileLocation ]; then
        credentialFileLocation=~/.aws/credentials
    fi

    while read line; do
        if [[ $line == "["* ]]; then echo "$line"; fi
    done < $credentialFileLocation
};

function _aws_profile_set() {
    if [ -z $1 ]; then  echo "Usage: aws_profile_set PROFILENAME"; return; fi

    exists="$(aws configure get aws_access_key_id --profile $1)"
    if [[ -n $exists ]]; then
        export AWS_PROFILE=$1
        export AWS_REGION=$(aws configure get region --profile $1)
        echo "Switched to AWS profile: $1"
        aws configure list
    fi
};

function _aws_profile_unset() {
    unset AWS_PROFILE
    unset AWS_REGION
    echo "Unset AWS profile"
};

# Work related utility functions
#aws-rw() { saml2aws -d -l $USER -c "${1}" -r bp-saml-rw -m "${2}"; }
#aws-ro() { saml2aws -d -l $USER -c "${1}" -r bp-saml-ro -m "${2}"; }
