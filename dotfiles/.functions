# Check if path is already in PATH, if not, add it to the start of PATH
pathprepend() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="$1${PATH:+":$PATH"}"
    fi
}

# Check if path is already in PATH, if not, add it to the end of PATH
pathappend() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="${PATH:+"$PATH:"}$1"
    fi
}

# Cleanup
function dsclean() {
    if [[ $(echo $SHELL | grep zsh) ]] ; then
        read -r "?Delete all .DS_Stores in this directory and all subdirectories? (y/n) "
    elif [[ $(echo $SHELL | grep bash) ]] ; then
        read -r -p "Delete all .DS_Stores in this directory and all subdirectories? (y/n) " -n 1
    fi

    if [[ $REPLY =~ ^[Yy]$ ]] ; then
        find . -type f -name '.DS_Store' -ls -delete
    fi
}

# Decode base64
function decode() {
    echo "$1" | base64 --decode ; echo
}

# Generate a random set of words for use in a password
function mkpassphrase() {
    p=$(gshuf -n${1-3} /usr/share/dict/words | tr '\n' ' ' | tr '[:upper:]' '[:lower:]' | sed 's/[[:space:]]$//')
    echo $p
}

function mkpassphrases() {
    for i in {1..10} ; do
        p=$(gshuf -n${1-3} /usr/share/dict/words | tr '\n' ' ' | tr '[:upper:]' '[:lower:]' | sed 's/[[:space:]]$//')
        echo $p
    done
}

function colours() {
    for i in {0..255} ; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
    done
}

function backup() {
    d=$(date +%Y%m%d-%s)
    echo Backup documents
    tar -zcf ~/backups/$HOSTNAME-documents-$d.tgz --exclude "/Users/$USER/Documents/migrated" /Users/$USER/Documents

    echo Backup projects
    tar -zcf ~/backups/$HOSTNAME-projects-$d.tgz --exclude "/Users/$USER/Projects/migrated" /Users/$USER/Projects
}

# ssh-agent
function check_ssh_agent() {
    if [ -f $HOME/.ssh/.ssh-agent ]; then
        source $HOME/.ssh/.ssh-agent > /dev/null
    else
        # no agent file
        return 1
    fi

    lsof -p $SSH_AGENT_PID | grep -q ssh-agent
    return $?
}

function launch_ssh_agent() {
    ssh-agent > $HOME/.ssh/.ssh-agent
    source $HOME/.ssh/.ssh-agent
    # load public keys
    for I in $HOME/.ssh/*.pub ; do
        echo adding ${I/.pub/}
        ssh-add --apple-use-keychain ${I/.pub/}
    done
}

function man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

function watch-cfn-validate() {
    p=$(pwd)

    if [[ -f $(command -v watchmedo) ]] ; then
        # cfn validation
        watchmedo shell-command --patterns="**/templates/**.yaml" --ignore-directories --recursive --command='aws cloudformation validate-template --template-body file://${watch_src_path} ; echo "${watch_src_path}"' "$p"
    else
        echo 'watchmedo does not exist. try: pip install watchdog'
    fi
}

function upgrade() {
    YELLOW='\033[0;33m'
    RESET='\033[0m'

    if [[ $(command -v brew) ]] ; then
        echo -e "${YELLOW}>>> Upgrading brew...${RESET}"
        brew upgrade
        brew cleanup --prune-prefix
    fi

    if [[ $(command -v pyenv) ]] ; then
        echo -e "\n${YELLOW}>>> pyenv versions...${RESET}"
        pyenv versions
    fi

    if [[ $(command -v pip) ]] ; then
        echo -e "\n${YELLOW}>>> Upgrading pip...${RESET}"
        pip install -U pip
        pip list --outdated | awk 'NR>2' | cut -d' ' -f1 | xargs pip install --upgrade
    fi

    # if [[ $(command -v gem) ]] ; then
    #     echo -e "\n${YELLOW}>>> Upgrading gems...${RESET}"
    #     # shellcheck disable=SC2046
    #     gem update $(gem outdated | cut -d ' ' -f 1)
    # fi

    # if [[ $(command -v vagrant) ]] ; then
    #     echo -e "\n${YELLOW}>>> Upgrading vagrant plugins...${RESET}"
    #     vagrant plugin update
    # fi

    if [[ $(command -v mas) ]] ; then
        echo -e "\n${YELLOW}>>> Outdated apps from App Store...${RESET}"
        mas outdated
    fi

    if [[ $(command -v vim) ]] ; then
        echo -e "\n${YELLOW}>>> Upgrading vim...${RESET}"
        vim -c PluginUpdate -c quitall
    fi
}

function findpi() {
    # use arp to find all pi devices
    arp -na | grep -i "b8:27:eb"
    # If this doesn't work and you are using the latest Raspberry Pi 4, instead run:
    arp -na | grep -i "dc:a6:32"
}
