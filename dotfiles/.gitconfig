[core]
    editor = vim
    excludesfile = ~/.gitignore_global
    attributesfile = ~/.gitattributes
    pager = cat

[user]
    #name = set GIT_COMMITTER_NAME and GIT_AUTHOR_NAME in ~/.extra
    #email = set EMAIL in ~/.extra

[commit]
    template = ~/.gitcommitmessage

[pager]
    log = diff-highlight | less
    show = diff-highlight | less
    diff = diff-highlight | less

[color]
    ui = auto

[color "branch"]
    current = red reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[push]
    default = simple

[apply]
    whitespace = nowarn

[merge]
    log = true

[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true

[alias]
    # logging
    l = "!f() { git log --pretty=format:\"%Cred%h %Cgreen%ad%Creset%C(yellow)%d%Creset %s %C(bold blue)%an\" --date=relative -${1:-15}; }; f"
    lf = "!f() { git log --pretty=format:\"%Cred%h %Cgreen%ad%Creset%C(yellow)%d%Creset %s %C(bold blue)%an\" --date=relative --decorate --numstat -${1:-15}; }; f"
    lg = "!f() { git log --pretty=format:\"%Cred%h %Cgreen%ad%Creset%C(yellow)%d%Creset %s %C(bold blue)%an\" --date=relative --graph -${1:-15}; }; f"
    lga = "!f() { git log --pretty=format:\"%Cred%h %Cgreen%ad%Creset%C(yellow)%d%Creset %s %C(bold blue)%an\" --date=relative --graph --all --topo-order -${1:-15}; }; f"

    # list all files
    ls = ls-files

    # diffing
    d = "!f() { git diff --patch-with-stat HEAD~${1:-0}; }; f"
    df = "!f() { git diff --stat HEAD~${1:-0}; }; f"

    # searching
    g = grep -I
    # search in file name
    gf = ! git ls-files | grep
    # search and replace using gnu-sed
    sed = ! git grep -Izl '.' | xargs -0 sed -i -e

    # View the current working tree status using the short format
    s = status -s
    tagged = tag --list --points-at HEAD

    # show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a -v
    remotes = remote -v

    p = pull

    # conflicts/merges
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    # rebase
    r = "!f() { git rebase -i HEAD~${1:-1}; }; f"

    # committing
    cnm = commit -m 'no message'
